package {{.PackageName}}

import (
    {{ range .ImportedPackages}}{{.}}
    {{ end }}
)

type sqlRepository struct {
    db *database.PostgreSQL
}

func NewSQLRepository(db *database.PostgreSQL) Repository {
    return &sqlRepository{db}
}

const (
    selectQuery = `
        SELECT
            {{ sqlcolumns .Parent.Fields }}
        FROM {{.Parent.TableName}}
    `
    selectCount = `
        SELECT COUNT(id) FROM {{.Parent.TableName}}
    `
    insertQuery = `
        INSERT INTO {{ .Parent.TableName}} (
            {{ sqlcolumns .Parent.Fields }}
        ) VALUES ({{ len .Parent.Fields | sqlvalues }})
    `
    updateQuery = `
        UPDATE {{.Parent.TableName}}
        SET
    `
    {{ range .Childs }}
    select{{.StructName}}Query = `
        SELECT
            {{ sqlcolumns .Fields }}
        FROM {{.TableName}}
    `
    {{ end }}
    {{ range .Childs }}
    insert{{.StructName}}Query = `
        INSERT INTO {{ .TableName}} (
            {{ sqlcolumns .Fields }}
        ) VALUES ({{ len .Fields | sqlvalues }})
    `
    {{ end }}
)

func (repo *sqlRepository) Store(ctx context.Context, entity {{.Parent.StructName}}) error {
    exist, err := repo.existByID(ctx, entity.Id)
    if err != nil {
        return err
    }
    if exist {
        return repo.update(ctx, entity)
    }
    return repo.insert(ctx, entity)
}

func (repo *sqlRepository) Count(ctx context.Context) (total int, err error) {
    if err := repo.db.Get(ctx, &total, selectCount); err != nil {
        return 0, err
    }
    return total, nil
}

func (repo *sqlRepository) FindByID(ctx context.Context, id string) (res {{.Parent.StructName}}, err error) {
    err = repo.db.Get(ctx, &res, selectQuery + " WHERE entity_id = " + id)
    if err != nil {
        return
    }
    {{- range .Childs }}
    var {{.StructName | first_letter_to_lower}}List []{{.StructName}}
    err = repo.db.Select(ctx, &{{.StructName | first_letter_to_lower}}List, select{{.StructName}}Query + " WHERE {{.RootTableName}}_id = " + id)
    if err != nil {
        return
    }
    {{- end }}
    {{- range .Childs }}
    res.{{.StructName}}List = {{.StructName | first_letter_to_lower}}List
    {{- end }}
    return
}

func (repo *sqlRepository) FindByIDs(ctx context.Context, ids []string) (res []{{.Parent.StructName}}, err error) {
    if err = repo.db.Select(ctx, &res, selectQuery + " WHERE entity_id IN (:ids)", map[string]interface{}{
        "ids": ids, 
    }); err != nil {
        return
    }
    return
}

func (repo *sqlRepository) FindPage(ctx context.Context, pageNum int, pageSize int) (res page.Page[{{.Parent.StructName}}], err error) {
    total, err := repo.Count(ctx)
    if err != nil {
        return
    }
    var items []{{.Parent.StructName}}
    offset := page.GetOffset(pageNum, pageSize)
    if err := repo.db.Select(ctx, &items, " LIMIT $1 OFFSET $2", pageSize, offset); err != nil {
        return res, err
    }
    return page.New[{{.Parent.StructName}}](items, total, pageNum, pageSize), nil
}

func (repo *sqlRepository) existByID(ctx context.Context, id string) (bool, error) {
    var total int
    if err := repo.db.Get(ctx, &total, " WHERE id = " + id); err != nil {
        return false, err
    }
    return total > 0, nil
}

func (repo *sqlRepository) insert(ctx context.Context, entity {{.Parent.StructName}}) error {
    if err := repo.db.WithTransaction(ctx, func(tx *sqlx.Tx) error {
        res, err := tx.Exec(
            insertQuery,
            {{ range .Parent.Fields }}entity.{{ title .ID}},
            {{ end }}
        )
        if err != nil {
            return err
        }
        rowsAffected, err := res.RowsAffected()
        if err != nil {
            return err
        }
        if rowsAffected <= 0 {
            return errors.New("no rows affected")
        }
        {{- range .Childs }}
        if err = repo.insert{{.StructName}}List(tx, entity.{{.StructName}}List); err != nil {
            return err
        }
        {{- end }}
        return nil
    }); err != nil {
        return err
    }
    return nil
}

func (repo *sqlRepository) update(ctx context.Context, entity {{.Parent.StructName}}) error {
    if err := repo.db.WithTransaction(ctx, func(tx *sqlx.Tx) error {
        res, err := tx.Exec(
            updateQuery,
            {{ range .Parent.Fields }}entity.{{ title .ID}},
            {{ end }}
        )
        if err != nil {
            return err
        }
        _, err = res.RowsAffected()
        if err != nil {
            return err
        }
        {{- range .Childs}}
        if err = repo.delete{{.StructName}}List(entity.Id); err != nil {
            return err
        }
        {{- end }}
        {{- range .Childs}}
        if err = repo.insert{{.StructName}}List(tx, entity.{{.StructName}}List); err != nil {
            return err
        }
        {{- end }}
        return nil
    }); err != nil {
        return err
    }
    return nil
}

{{ range .Childs }}
func (repo *sqlRepository) delete{{.StructName}}List(id string) error {
    return nil
} 
{{ end }}

{{ range .Childs }}
func (repo *sqlRepository) insert{{.StructName}}List(tx *sqlx.Tx, entityList []{{.StructName}}) error {
    for _, entity := range entityList {
        res, err := tx.Exec(insert{{.StructName}}Query, 
            {{- range .Fields }}
            entity.{{.ID}},
            {{- end }}
        )
        if err != nil {
            return err
        }
        _, err = res.RowsAffected()
        if err != nil {
            return err
        }
    }
    return nil
}
{{ end }}
{{ range .Childs }}
func (repo *sqlRepository) select{{.StructName}}ByIDs(ctx context.Context, ids []string) (res []{{.StructName}}, err error) {
    if err := repo.db.Select(ctx, &res, select{{.StructName}}Query + " WHERE {{.RootTableName}}_id IN (:ids)",
        map[string]interface{}{
            "ids": ids,
        },
    ); err != nil {
        return res, err
    }
    return res, nil
}
{{ end }}